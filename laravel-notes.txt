# Plantillas Blade.

    Layout: 
        @yield('title'), @yield('content')

    home:     
        @section('title', 'Hello! | Home')
        @section('content') - @endsection

# Controladores

    app/Http/Controllers

    > php artisan route:list (r:l)

        +--------+----------+-----------+-----------+-----------------------------------+------------+
        | Domain | Method   | URI       | Name      | Action                            | Middleware |
        +--------+----------+-----------+-----------+-----------------------------------+------------+
        |        | GET|HEAD | /         | home      | Illuminate\Routing\ViewController | web        |
        |        | GET|HEAD | about     | about     | Illuminate\Routing\ViewController | web        |
        |        | GET|HEAD | contact   | contact   | Illuminate\Routing\ViewController | web        |
        |        | GET|HEAD | portfolio | portfolio | Illuminate\Routing\ViewController | web        |
        +--------+----------+-----------+-----------+-----------------------------------+------------+


    > php artisan make:controller PortfolioController -i (Create a Controller with invoke method)

# Controladores Resources y API.

    # Resource Controller 

        > php artisan make:controller PortfolioController -r

            Crea un controller con los metodos:
                1 - Index.      (Usado para listar recursos)
                2 - Create.     (Formulario para crear recursos)
                3 - Store       (Guardar recursos en la base de datos)
                4 - Show        (Mostramos un recurso en especifico por ID)
                5 - Edit        (Formulario editar un recurso que ya existe)
                6 - Update      (Guardamos la actualizacion de un recurso)
                7 - Destroy     (Eliminamos un recurso)

        routes/web.php

            Route::resource('projects', 'PortfolioController');
            Route::resource('projects', 'PortfolioController')->only(['index', 'show']);
            Route::resource('projects', 'PortfolioController')->except(['index', 'show']);

        > php artisan r:l

            +--------+-----------+-------------------------+------------------+--------------------------------------------------+------------+
            | Domain | Method    | URI                     | Name             | Action                                           | Middleware |
            +--------+-----------+-------------------------+------------------+--------------------------------------------------+------------+
            |        | GET|HEAD  | projects                | projects.index   | App\Http\Controllers\PortfolioController@index   | web        |
            |        | POST      | projects                | projects.store   | App\Http\Controllers\PortfolioController@store   | web        |
            |        | GET|HEAD  | projects/create         | projects.create  | App\Http\Controllers\PortfolioController@create  | web        |
            |        | GET|HEAD  | projects/{project}      | projects.show    | App\Http\Controllers\PortfolioController@show    | web        |
            |        | PUT|PATCH | projects/{project}      | projects.update  | App\Http\Controllers\PortfolioController@update  | web        |
            |        | DELETE    | projects/{project}      | projects.destroy | App\Http\Controllers\PortfolioController@destroy | web        |
            |        | GET|HEAD  | projects/{project}/edit | projects.edit    | App\Http\Controllers\PortfolioController@edit    | web        |
            +--------+-----------+-------------------------+------------------+--------------------------------------------------+------------+

    # API Controller

        > php artisan make:controller PortfolioController --api

            Crea un controller con los metodos:
                1 - Index.      (Usado para listar recursos)
                2 - Store       (Guardar recursos en la base de datos)
                3 - Show        (Mostramos un recurso en especifico por ID)
                4 - Update      (Guardamos la actualizacion de un recurso)
                5 - Destroy     (Eliminamos un recurso)

        routes/web.php

            Route::ApiResource('projects', 'PortfolioController');
            Route::ApiResource('projects', 'PortfolioController')->only(['index', 'show']);
            Route::ApiResource('projects', 'PortfolioController')->except(['index', 'show']);

        > php artisan r:l

            +--------+-----------+--------------------+------------------+--------------------------------------------------+------------+
            | Domain | Method    | URI                | Name             | Action                                           | Middleware |
            +--------+-----------+--------------------+------------------+--------------------------------------------------+------------+
            |        | GET|HEAD  | projects           | projects.index   | App\Http\Controllers\PortfolioController@index   | web        |
            |        | POST      | projects           | projects.store   | App\Http\Controllers\PortfolioController@store   | web        |
            |        | GET|HEAD  | projects/{project} | projects.show    | App\Http\Controllers\PortfolioController@show    | web        |
            |        | PUT|PATCH | projects/{project} | projects.update  | App\Http\Controllers\PortfolioController@update  | web        |
            |        | DELETE    | projects/{project} | projects.destroy | App\Http\Controllers\PortfolioController@destroy | web        |
            +--------+-----------+--------------------+------------------+--------------------------------------------------+------------+

# Creando Helpers

    app/helpers.php

        Se crea file con funciones helpers.

    composer.json

        "autoload": {
            "psr-4": {
                "App\\": "app/"
            },
            "classmap": [
                "database/seeds",
                "database/factories"
            ],
            "files": ["app/helpers.php"] <-------
        },

        > composer dumpautoload

            Generating optimized autoload files
            > Illuminate\Foundation\ComposerScripts::postAutoloadDump
            > @php artisan package:discover --ansi
            Discovered Package: facade/ignition
            Discovered Package: fideloper/proxy
            Discovered Package: fruitcake/laravel-cors
            Discovered Package: laravel/tinker
            Discovered Package: nesbot/carbon
            Discovered Package: nunomaduro/collision
            Package manifest generated successfully.
            Generated optimized autoload files containing 4415 classes

    Blade template

        incluir archivos parciales

            @include('partials.nav')

# Envio de formularios.

    Creacion de token para evitar ataques XSS

        <form>
            @csrf
        </form>

# Validacion de formularios.

    # Controller

        request()->validate([
            'name'      => 'required',
            'email'     => 'required|email',
            'subject'   => 'required',
            'content'   => 'required|min:3',
        ]);

    # View

        @if( $errors->any() )
            @foreach( $errors->all() as $error )
                <ul>
                    <li>{{ $error }}</li>
                </ul>
            @endforeach
        @endif

# Traducir aplicaciones en laravel

    config/app.config

        'locale' => 'es',

# Enviar emails con Laravel

    Create a new email class
        > php artisan make:mail MessageReceived

    .env

        Log Driver

            MAIL_MAILER=log

        SMTP Driver

            MAIL_MAILER=smtp
            MAIL_HOST=smtp.mailtrap.io
            MAIL_PORT=2525
            MAIL_USERNAME=secret
            MAIL_PASSWORD=secret
            MAIL_ENCRYPTION=null
            MAIL_FROM_ADDRESS=sender@sender.com
            MAIL_FROM_NAME='Joseph Dakkak'

# Migraciones

    Control de versiones para la base de datos.

    Ejecutar Migraciones
        > php artisan migrate

    Ejecutar Migraciones desde 0
        >php artisan migrate:fresh

    Hacer Rollback
        > php artisan migrate:rollback

    Hacer Rollback del ultimos step
        > php artisan migrate:rollback --step=1

    Crear Migraciones

        Crear tabla
            > php artisan make:migration (migration_name) --create=table_name
            > php artisan make:migration create_...

        Crear tabla
            > php artisan make:migration (migration_name) --table=table_name
            > php artisan make:migration ..._to_...
    
# Eloquent: Obtener datos

    Usando QueryBuilder

        use DB;
        $portfolio = DB::table('projects')->get();

    Usando Eloquent

        Crear modelos
            > php artisan make:model Project        // Solo crea el modelo.

            Description:
            Create a new Eloquent model class

            Usage:
            make:model [options] [--] <name>

            Arguments:
            name                  The name of the class

            Options:
            -a, --all             Generate a migration, seeder, factory, and resource controller for the model
            -c, --controller      Create a new controller for the model
            -f, --factory         Create a new factory for the model
                --force           Create the class even if the model already exists
            -m, --migration       Create a new migration file for the model
            -s, --seed            Create a new seeder file for the model
            -p, --pivot           Indicates if the generated model should be a custom intermediate table model
            -r, --resource        Indicates if the generated controller should be a resource controller
                --api             Indicates if the generated controller should be an API controller
            -h, --help            Display this help message
            -q, --quiet           Do not output any message
            -V, --version         Display this application version
                --ansi            Force ANSI output
                --no-ansi         Disable ANSI output
            -n, --no-interaction  Do not ask any interactive question
                --env[=ENV]       The environment the command should run under
            -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug  

# Asignacion masiva

    Metodo de proteccion en el insertado de datos.

    En el modelo.

        Eg. permitir campos
            protected $fillable = ['title', 'url', 'description'];

        Eg. bloquear campos
            protected $guarded = ['title', 'url', 'description'];

        Eg. deshabilitar proteccion
            protected $guarded = [];

# Form Requests Validations
    
    Clases dedicadas para encapsular la logica de validacion y autorizacion. Pensados para 
    validar formularios complejos. Se crean en "app/Http/Requests"

        > php artisan make:request CreateProjectRequest
